start_qemu()
{
    VM_NAME="$1"

    set_qemu_program $QEMU_CPU

    if [ "$SSH_PORT" = "auto" ]
    then
	echo "Automatic SSH_PORT not supported in qemu"
	echo "  - specify a port, e g SSH_PORT=2222"
	return 1
    fi

    debug "Starting qemu $1"
    debug " $VM_START_ARGS"
    MONITOR_ARGS="-monitor unix:/tmp/qemu-$VM_NAME.sock,server,nowait "
    REDIR_ARGS="-redir tcp:$SSH_PORT::22 "
    EXTRA_ARGS="-no-reboot -nographic -display none "

    START_VM="$QEMU_BINARY -kernel $QEMU_KERNEL"

    if [ "$QEMU_CPU" != "" ]
    then 
	START_VM="$START_VM -cpu $QEMU_CPU  "
    fi  	 

    START_VM="$START_VM -m 256 -M versatilepb "
    START_VM="$START_VM -no-reboot "
    if [ "$QEMU_ROOT" != "" ]
    then
	START_VM="$START_VM -append \"root=${QEMU_ROOT} panic=1 rootfstype=ext4 rw \" "
    else
	START_VM="$START_VM -append \"root=/dev/sda1\" "
    fi

    SNAPSHOTS=$(ls -1t ${QEMU_HDA}-snapshot-* | wc -l)
    if [ $SNAPSHOTS  -eq 0 ]
    then
	HDA=$QEMU_HDA
	
    elif [ $SNAPSHOTS  -eq 1 ]
    then
	HDA=$(ls -1t ${QEMU_HDA}-snapshot-*| head -1)
	
    elif [ $SNAPSHOTS  -gt 1 ]
    then
	echo "Too many snapshots, can't decide which to use"
	return 1
    fi

    START_VM="$START_VM -nographic -hda $HDA"	

    if [ "$QEMU_INITRD" != "" ]
    then
	START_VM="$START_VM -initrd $QEMU_INITRD"
    fi
    START_VM="$START_VM  $MONITOR_ARGS $REDIR_ARGS $EXTRA_ARGS"

    if [ ! -f $QEMU_KERNEL ] || [ ! -f $QEMU_INITRD ] || [ ! -f $QEMU_HDA ]
        then
        debug "Can't find either of:"
        debug "  kernel: $QEMU_KERNEL"
        debug "  initrd: $QEMU_INITRD"
        debug "  hda: $QEMU_HDA"
        return 1
    fi


    if [ "$VNC_PORT" != "" ]
    then
        START_VM="$START_VM -vnc :$VNC_PORT"
    fi
    debug " $START_VM"        

    echo "$START_VM" | bash &

    return 0
# /dev/null
}

set_qemu_program()
{
    WANTED_CPU=$1
    export QEMU_BINARY
    case $WANTED_CPU in
        "arm")
         QEMU_BINARY=qemu-system-arm
         ;;
        "arm1176")
         QEMU_BINARY=qemu-system-arm
         ;;
        "armel")
         QEMU_BINARY=qemu-system-arm
         ;;
        *)
         echo "Unsupported cpu $WANTED_CPU"
         ;;
    esac
}

check_qemu_proc()
{
    PROC_EXPR=$1

    RET=$(ps ax  | grep qemu | grep -v grep | grep -w $PROC_EXPR | wc -l)
    debug "Number of qemu processes: $RET"
    
    return $RET
}

kill_qemu_sub() 
{
    QEMU_NAME=$1
    SIG=$2

    QEMU_VM_PROC=$(ps x  | grep qemu | grep -v grep | grep -w $VB_NAME | awk '{print $1}')
    if [ "$QEMU_VM_PROC" != "" ]
    then
	kill $SIG $QEMU_VM_PROC
	sleep 3
    else
	return
    fi

}


kill_qemu() 
{
    QEMU_NAME=$1

    kill_qemu_sub $QEMU_NAME 
    kill_qemu_sub $QEMU_NAME SIGINT
    kill_qemu_sub $QEMU_NAME SIGKILL
}

stop_qemu()
{
    VB_NAME=$1
    debug "Stopping qemu $VM_NAME"

    if [ "$VB_NAME" != "" ]
    then

	DELAY=1


	check_qemu_proc $VB_NAME
	RET=$?
	
	if [ $RET -eq 0 ];
	then
	    return
	fi


        debug "Send to QEMU $VB_NAME: ctrl-alt-delete"
        send_to_qemu $VB_NAME "sendkey ctrl-alt-delete"
        wait_for_state down $DELAY $VB_NAME


        is_qemu_up $VB_NAME
        RET=$?

        if [ "$RET" != "0" ]
        then
            debug " client is down, returning"
            return
        fi

	check_qemu_proc $VB_NAME
	if [ $? -eq 0 ];
	then
	    debug " no proc found"
	    return
	fi

        debug "Send to QEMU $VB_NAME: system_powerdown"
        send_to_qemu $VB_NAME "system_powerdown"
        wait_for_state down $DELAY $VB_NAME


        is_qemu_up $VB_NAME
        RET=$?

        if [ "$RET" != "0" ]
        then
            debug " client is down, returning"
            return
        fi

	check_qemu_proc $VB_NAME
	if [ $? -eq 0 ];
	then
	    return
	fi

        debug "Send to QEMU $VB_NAME: quit"
        send_to_qemu $VB_NAME "quit"
        wait_for_state down $DELAY $VB_NAME

	check_qemu_proc $VB_NAME
	if [ $? -eq 0 ];
	then
	    debug "no qemu procs...."
	    return
	fi

	kill_qemu

    fi



}

is_qemu_up()
{
    export WANTED_VM=$1
    CNT=$(send_to_qemu $WANTED_VM "info status" | grep "VM status: running" | wc -l)

    debug " is_qemu_up: $CNT"

    # If the VM is running (>1), return 0
    if [ $CNT -ne 0 ]
    then
        debug "qemu vm \"$WANTED_VM\" is running."
        return 0
    fi

    debug "qemu vm \"$WANTED_VM\" is NOT running."
    return 1
}

send_to_qemu()
{
#    echo "SEND"
    WANTED_VM=$1
    MSG=$2

    SOCKET=/tmp/qemu-${WANTED_VM}.sock
 #   echo "MSG: $MSG  => unix-connect:${SOCKET}"

    echo "$MSG" | socat - unix-connect:${SOCKET} 2>/dev/null | \
        grep -v "(qemu)" | grep -v "QEMU [0-9\. ]*monitor"
}

android-specific()
{
    echo "Listing running qemu devices not possible at the moment"
}


list_running_qemu() 
{
    echo "  Qemu"

    QEMUS=$(ps x   | grep qemu | grep -v grep | grep sock | sed 's, ,\n,g' | grep sock )
    if [ "$QEMUS" != ""  ] 
    then
	for token in  $QEMUS
	do
	    token=${token#unix:/tmp/qemu-}
	    QEMU_NAME=${token%%.sock,server,nowait}
	    IFS=" "
	    echo "   |--$QEMU_NAME"  
	    
	    SUB_CLIENTS=$(find $ETC_DIRS -name "*.conf" 2>/dev/null | grep "clients/" | xargs grep -l $QEMU_NAME)
	    
#	echo "SUB_CLIENTS: $SUB_CLIENTS"
	    if [ "$SUB_CLIENTS" != "" ]
	    then
		for qe in $SUB_CLIENTS
		do
#		echo " ---- $AD_NAME"
		    QE_SHORT_NAME=$(basename $qe)
		    echo "     |--$QE_SHORT_NAME  (client)"  
		    FOUND=true
		done
#	    if [ "$FOUND" = "false" ]
#	    then
#		echo "      not in use"
#	    fi
	    else
		echo "     |--$QEMU_NAME  (no clients using it)"  
	    fi
	done
    else
	echo "    * No Qemu clients currently running"
    fi
    
}

take_snapshot_qemu()
{
    SNAPSHOT_NAME=$1
    RET=0
 
    if [ "$SNAPSHOT_NAME" = "" ] ; then
	SNAPSHOT_NAME="SEARD_BASE"
    fi

    SNAPSHOT_IMG=${QEMU_HDA}-snapshot-$SNAPSHOT_NAME

    if [ -f $SNAPSHOT_IMG ]
    then   
	echo "Snapshot name ($SNAPSHOT_NAME) already used. Bailing out"
	exit 1
    fi     	

    qemu-img create -f qcow2 -b ${QEMU_HDA} $SNAPSHOT_IMG

    RET=$?
    return $RET
}


restore_snapshot_qemu()
{
    echo
}

delete_snapshot_qemu()
{
    SNAPSHOT_NAME=$1
    RET=0
 
    if [ "$SNAPSHOT_NAME" = "" ] ; then
	SNAPSHOT_NAME="SEARD_BASE"
    fi

    SNAPSHOT_IMG=${QEMU_HDA}-snapshot-$SNAPSHOT_NAME

    if [ ! -f $SNAPSHOT_IMG ]
    then   
	echo "Snapshot ($SNAPSHOT_NAME) does not exist. Bailing out"
	exit 1
    fi     	

    rm  $SNAPSHOT_IMG

    RET=$?
    return $RET
}
