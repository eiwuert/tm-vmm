
#
# Given an AVD port this function will find the coresponding name
#   this function telnets in to the device and execs a command 'avd name'
#   and prints out the name .... there must be a better way
#
get_avd_name_for_port()
{
    AVD_PORT=$1
    NAME=$(expect -c "spawn telnet localhost $AVD_PORT; expect \"OK\" ; send \"avd name\n\" ; expect OK" \
        2>/dev/null \
	| grep -v -e "^OK"  -e Trying  -e Connected \
	          -e "Android Console" -e "Escape character" \
	          -e "spawn telnet"    -e "avd name" \
	| sed 's,[\n\r]*,,g' )

    echo "$NAME"
}

#
# Given an AVD name this function will find the coresponding port
#
get_avd_port_for_name()
{
    SAVED_IFS=$IFS
    export IFS=";"
    AVD_NAME=$1
    for i in $(get_connected_avds_ports | awk ' { printf "%s;", $1}')
    do
	AVD_FOUND=$(get_avd_name_for_port $i)
#	echo "will test"
#	echo "i:           '$i'"
#	echo "FOUND:       '$AVD_FOUND'"
#	echo "NAME:        '$AVD_NAME'"
#	echo -n "   "
	if [ "$AVD_FOUND" = "$AVD_NAME" ]
	then
#	    echo "FOUND IT :......"
	    echo $i
	fi
    done
    IFS=$SAVED_IFS

}

get_connected_avds() 
{
    check_android_settings hard
    RET=$?
    if [ $RET -ne 0 ]
    then
    	debug "check_android_settings hard incompleted. RET=$RET"
    # 	echo "Android commands doesn't seem to be set up correctly."
     	return $RET
    fi
    $ADB devices | grep -v "List of devices attached" | \
	grep -v "^[ \t]*$"   | \
	awk ' { print $1 } ' | \
	sed  -e "s,[\n\r]*,,g"
}

get_connected_avds_ports()
{
    get_connected_avds | sed -e "s,[ \t]*emulator\-,,g" 
#| grep -v "[a-zA-Z]"
}

setup_android()
{
    # Set up Android path stuff
    debug "setup_android"
    if [ "$ANDROID_ADT_PATH" = "" ] && [ "$ANDROID" != "" ]
    then
	ANDROID_ADT_PATH=$(dirname $ANDROID)/../../
    fi

    if [ "$ANDROID_ADT_PATH" = "" ] 
    then
	debug "setup_android: ANDROID_ADT_PATH not set"
	debug "Can not use Android: ANDROID_ADT_PATH not set"
	return 0
    fi

    if [ "$ANDROID_AVD_DIR" = "" ]
    then
	ANDROID_AVD_DIR=${HOME}/.android/avd/
    fi

    # Set up Android command stuff
    if [ "$ANDROID" = "" ]
    then   	 
	ANDROID=$ANDROID_ADT_PATH/sdk/tools/android
    fi
    if [ "$ADB" = "" ]
    then   	 
	ADB=$ANDROID_ADT_PATH/sdk/platform-tools/adb
    fi
}

check_android_settings()
{
    MODE=$1
    debug "check_android_settings"
    
    if [ "$ANDROID" = "" ] || [ ! -x $ANDROID ]
    then   	 
	echo "no android command found"
	debug "no android command found"
	if [ "$MODE" = "hard" ] ; then 	exit 1 ; fi
    fi

    if [ "$ADB" = "" ] || [ ! -x $ADB ]
    then   	 
	echo "no adb command found"
	debug "no adb command found"
	if [ "$MODE" = "hard" ] ; then 	exit 1 ; fi
    fi

    if [ "$ANDROID_ADT_PATH" = "" ]
    then   	 
	echo "Can't find Android adt ... you must set ANDROID_ADT_PATH in your vmm.conf"
	debug "Can't find Android adt ... you must set ANDROID_ADT_PATH in your vmm.conf"
	if [ "$MODE" = "hard" ] ; then 	exit 1 ; fi
    fi

    return 0
}

exec_client_command_android()
{
    COMMAND="$1"

    #
    # If AVD, then the name to connect to is emulator-<port>
    #   so we need to build up the name
    #
    if [ "$ANDROID_SYS" != "physical" ]
    then   
	ANDROID_DEV=emulator-$ANDROID_PORT
    else
	ANDROID_DEV=$VM_NAME
    fi

    debug "Will execute on Android ($ANDROID_PORT): $COMMAND"
debug "$ADB -s $ANDROID_DEV shell $COMMAND"
    $ADB -s $ANDROID_DEV shell $COMMAND

    return $?
}

exec_client_raw_android()
{
    COMMAND="$1"

    debug "Will execute on Android ($ANDROID_PORT):  $COMMAND"
    if [ $ANDROID_SYS != physical ] ; then
	$ADB  -s emulator-$ANDROID_PORT $COMMAND
    else
	$ADB  -s $VM_NAME $COMMAND
    fi
    return $?
}



list_running_android()
{
    echo "  Android"

    AD_NAMES=$(get_connected_avds | awk '{ printf "%s;", $1}' )

    export IFS=";"
    if [ "$AD_NAMES" != "" ]
    then
	for AD_NAME in $AD_NAMES
	do
	    
	    if [ "$(echo $AD_NAME | egrep -v -e "emulator-[0-9]{3}" | wc -l)" =  "0" ]
	    then
		AD_PORT=$(echo $AD_NAME | sed 's,emulator-,,g')
		AVD_NAME=$(get_avd_name_for_port $AD_PORT)
	    else
		AVD_NAME="$AD_NAME"
	    fi

	    FOUND=0
	    for dir in $(echo $ETC_DIRS | sed 's, ,;,'g)
	    do
		if [ -d ${dir}/clients ]
		then
		    for vb in $(find ${dir}/clients -name *.conf | xargs grep -l $AVD_NAME )
		    do
			VB_SHORT_NAME=$(basename $vb | sed 's,\.conf,,g')
			echo "  |--$VB_SHORT_NAME  [$vb] (machine: $AVD_NAME))"  
			FOUND=1
		    done
		fi
	    done
	done
    else
	echo "   no android emulators currently running"
    fi
}

list_running_android_machines()
{
    echo "  Android"

    AD_NAMES=$(get_connected_avds | awk '{ printf "%s;", $1}' )

    export IFS=";"
    if [ "$AD_NAMES" != "" ]
    then
	for AD_NAME in $AD_NAMES
	do
	    
	    if [ "$(echo $AD_NAME | egrep -v -e "emulator-[0-9]{3}" | wc -l)" =  "0" ]
	    then
		AD_PORT=$(echo $AD_NAME | sed 's,emulator-,,g')
		AVD_NAME=$(get_avd_name_for_port $AD_PORT)
		PORT_STRING="(using port $AD_PORT)"
	    else
		PORT_STRING=" (physical device)"
		AVD_NAME="$AD_NAME"
	    fi

	    echo "  |-- $AVD_NAME $PORT_STRING"
	    
	    FOUND=0
	    for dir in $(echo $ETC_DIRS | sed 's, ,;,'g)
	    do
#		echo "------ 1"
		if [ -d ${dir}/clients ]
		then
#		echo "------ 2: ${dir}/clients  BEGIN"
#		find ${dir}/clients -name "*.conf" | xargs grep -l $AVD_NAME | awk 'BEGIN { printf "%s;", $0}'
#		echo "------ 2: ${dir}/clients  MID   $AVD_NAME"
		    for ad in $(find ${dir}/clients -name "*.conf" | xargs grep -l "$AVD_NAME" |  awk ' { printf "%s;", $0}')
		    do
#			echo " ---3 :::  looked for \"$ad\" ..."
			VB_SHORT_NAME=$(basename $ad | sed 's,\.conf,,g')
			echo "    |--$VB_SHORT_NAME  [$ad] (machine: $AVD_NAME))"  
			FOUND=1
		    done
#		echo "------ 2: ${dir}/clients  END   $AVD_NAME"

		fi
	    done
	    if [ $FOUND -eq 0 ] ;
	    then
	        echo " * avd is not registered as Testingmachine machine" ;
	        echo " * to create a configuration file, try: --create-client-conf $AVD_NAME" ;
	    fi

	done
    else
	echo "   no android emulators currently running"
    fi


}

start_android()
{
    debug "start_android."
    export PROC_EXPR=$1

    if [ "$ANDROID_SYS" = "physical" ]
    then   
	return
    fi

    if [ ! -x $ANDROID_ADT_PATH/sdk/tools/$ANDROID_SYS ] ; then
	debug "Could not find $ANDROID_ADT_PATH/sdk/tools/$ANDROID_SYS."
        echo "Android commands doesn't seem to be set up correctly."
        echo "Could not find $ANDROID_ADT_PATH/sdk/tools/$ANDROID_SYS."
        return 1
    fi

    if [ "$ANDROID_SYS" = "" ]
    then   
    	   echo "Not starting AVD....since we have no ANDROID_SYS"
	   return
    fi	

    $ANDROID_ADT_PATH/sdk/tools/$ANDROID_SYS -avd "$VM_NAME" -netspeed full -netdelay none &
}

start_android_headless()
{
    debug "Start android (headless)"

    $ANDROID_ADT_PATH/sdk/tools/$ANDROID_SYS -avd "$VM_NAME" -netspeed full -netdelay none -no-window &
}


check_android_proc()
{
    RET=$(ps auxww | grep emulator | grep -c "$VM_NAME" )

    debug "Number of Android processes: $RET."
    
    return $RET
}

kill_android_proc()
{
    KILL_ARG=$1

    debug "Kill Android proc \"$VM_NAME\" ($KILL_ARG)"

    VBID=$(ps auxww | grep emulator | grep "$VM_NAME")
    if [ "$VBID" != "" ] ; then
	kill $VBID 2>/dev/null
    fi
}

kill_android()
{
    kill_android_proc
    kill_android_proc "-9"
}

stop_android()
{
    debug "stop_android: $VM_NAME ($ANDROID_PORT)"

    if [ "$ANDROID_SYS" = "physical" ]
    then   
	return
    fi

    is_android_up
    # Android client up, RET = 0; Android client down, RET = 1
    RET=$?

    debug "Killing Android \"$VM_NAME\"."
    $ADB -s emulator-$ANDROID_PORT emu kill >/dev/null 2>/dev/null

    if [ $RET = 1 ] ; then
	debug "\"$VM_NAME\" is down."
	echo "\"$VM_NAME\" is down."
        return 0
    else
	$ADB -s emulator-$ANDROID_PORT emu kill >/dev/null 2>/dev/null

	wait_for_state down 20

	is_android_up
	# Android client up, RET = 0; Android client down, RET = 1
	RET=$?
	if [ $RET = 1 ] ; then
	    debug "\"$VM_NAME\" is down."
	    echo "\"$VM_NAME\" is down."
	    return 0
	else
	    debug "\"$VM_NAME\" is not shut down through adb."
	    return 1
	fi
    fi
}
is_android_up()
{
    debug "is_android_up"

    ANDROID_PORT=$(get_avd_port_for_name $VM_NAME)
    # debug " is_android_up? adb -s emulator-$ANDROID_PORT shell getprop init.svc.bootanim"

    STOPPED=$($ADB -s emulator-$ANDROID_PORT shell "getprop init.svc.bootanim"  2>/dev/null | grep topped | wc -l)
    
    debug " is_android_up? adb -s emulator-$ANDROID_PORT shell getprop init.svc.bootanim => $STOPPED"

    if [ $STOPPED -eq 0 ]
    then
        debug "Android avd \"$VM_NAME\" is NOT running."
        return 1
    fi

    debug "Android avd \"$VM_NAME\" is running."
    return 0
}


check_client_android()
{
    AVD_NAME="$1"
    export IFS=";"
    for dir in $(echo $ETC_DIRS | sed 's, ,;,'g)
    do
        if [ -d ${dir}/clients ]
        then
         for vb in $(find ${dir}/clients -name "$VM_NAME".conf )
         do
                AVD_MACHINE=$(grep VM_NAME $vb | sed -e 's,VM_NAME=,,g' -e 's,\",,g')
                check_machine_android $AVD_MACHINE
                RET=$?
                break
         done
        fi
    done
    export IFS=""
    return $RET
}

check_machine_android()
{
    WANTED_VM=$1

    debug "Trying to find $WANTED_VM among android avds to check for status"
    VB_NAMES1=$($ANDROID list avd | grep Name | sed -e 's,[ \t]*Name: ,,g' | tr '\n' ' ')
    VB_NAMES2=$($ADB  devices | grep -v "List of devices attached" | grep -v "^[ ]*$" | grep -v emulator | awk ' {print $1}')
    VB_NAMES="$VB_NAMES1 $VB_NAMES2 "
    SAVED_IFS=$IFS
    export IFS=" "
    for VB_NAME in $VB_NAMES
    do
        # echo "VB_NAME:'$VB_NAME'  '$1'"

        FOUND=false
        if [ "$VB_NAME" = "$WANTED_VM" ]
        then
            FOUND=true
            MACHINE_FOUND=true
            AP=$(get_avd_port_for_name $WANTED_VM)

            # Hard to get good info out of adb about avd status
            # check files in root - if not 0 then ok ... ehum	    
            LS_LEN=$(exec_client_command_android ls 2>/dev/null | wc -l)

            if [ $LS_LEN -gt 0 ]
            then
                RET=0
            else
                RET=1
            fi
        fi
    done
    
    IFS=$SAVED_IFS

    return $RET
}

get_android_specific_info()
{
    check_android_settings

    ANDROID_SYS=$( grep ANDROID_SYS $CLI_CONF | sed 's,ANDROID_SYS=,,g' | sed 's,\",,g')

# This function only works when the avd is running/attached.
    ANDROID_PORT=$(get_avd_port_for_name $VM_NAME)
    debug "ANDROID_PORT: $ANDROID_PORT"
}


check_android_vm_existence()
{
    WANTED_VM=$1
    debug "check_android_vm_existence: \"$WANTED_VM\""
    CNT=0

    if [ "$ANDROID" = "" ] || [ "$ADB" = "" ] 
    then 
	echo " # Android not set up, can't find AVD for $WANTED_VM "
	return 1
    fi
    

    CNT1=$($ANDROID list avd | grep Name | sed 's,[ \t]*Name: ,,g' | grep "$WANTED_VM" | wc -l)
    CNT2=$($ADB devices | grep "$WANTED_VM" | wc -l)
    if [ $CNT2 -gt 0 ] ; then
	ANDROID_SYS=physical
    fi

    CNT=$(( $CNT1 + $CNT2))

    debug "Found $CNT Android machine named \"$WANTED_VM\"."

    if [ $CNT = 1 ] ; then
	return 0
    else
	return 1
    fi
}

android_install_app()
{
    APP=$1
    MODE=$2

    exec_client_raw_android "$MODE $APP"
    return $?
}


get_guest_os_for_client_android()
{
    GUEST_OS_TMP="Android"

    echo "$GUEST_OS_TMP"

    if [ "$ANDROID_PORT" = "" ] ; then
	debug "Android machine seems not attached/started."
    else
	debug " Version: $($ADB -s emulator-$ANDROID_PORT shell getprop ro.build.version.release)"
	debug " Kernel version: $(adb -s emulator-$ANDROID_PORT shell cat /proc/version)"
	debug " Build number: $($ADB -s emulator-$ANDROID_PORT shell getprop ro.build.description)"
    fi

    return 0
}

list_android_machines_print_info()
{
    AD_NAME_LONG=$1
    AD_TYPE=$2

    AD_NAME=$(basename $AD_NAME_LONG)
    FOUND=false
    if [ "$AD_NAME" != "" ]
    then
	echo  "  |--$AD_NAME  ($AD_TYPE machine)"
	SUB_CLIENTS=$(find $ETC_DIRS -name *.conf 2>/dev/null | grep "clients/" | xargs grep -l $AD_NAME)
	
#	    echo "SUB_CLIENTS: $SUB_CLIENTS"
	if [ "$SUB_CLIENTS" != "" ]
	then
	    for vb in $SUB_CLIENTS
	    do
#		echo " ---- $AD_NAME"
		AD_SHORT_NAME=$(basename $vb)
		echo "     |--$AD_SHORT_NAME  (client)"  
		FOUND=true
	    done
#	    if [ "$FOUND" = "false" ]
#	    then
#		echo "      not in use"
#	    fi
	fi
    else
	echo "   no android machines found"
    fi
}


list_android_machines()
{
    

     if [ "$ANDROID" = "" ] || [ "$ADB" = "" ] 
     then 
	 echo " # Android not set up, can't list devices"
	 return 0
     fi

    debug "Listing android virtual devices"
#    AD_NAMES=$(find  ${ANDROID_AVD_DIR}/* -prune -name "*.ini" | sed 's,\.ini,,g')


    AD_NAMES_AVD=$($ANDROID list avd | grep Name | sed 's,[ \t]*Name: ,,g')
    AD_NAMES_PHY=$($ADB devices | grep -v "List of devices attached" | egrep -v -e "emulator-[0-9]{3}" | awk ' { print $1}')
#    AD_NAMES="$AD_NAMES_AVD $AD_NAMES_PHY"
    for AD_NAME_LONG in $AD_NAMES_AVD
    do
	list_android_machines_print_info $AD_NAME_LONG "virtual"
    done
    for AD_NAME_LONG in $AD_NAMES_PHY
    do
	list_android_machines_print_info $AD_NAME_LONG "physical"
    done

}


