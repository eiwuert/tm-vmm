#
#                                                                   
#                   Testing Machine
#                      
#   Copyright (C) 2012, 2013 TIS Innovation Park
#                                                                   
# This program is free software; you can redistribute it and/or     
# modify it under the terms of the GNU General Public License       
# as published by the Free Software Foundation; either version 3    
# of the License, or any later version.                             
#                                                                   
#                                                                   
# This program is distributed in the hope that it will be useful,   
# but WITHOUT ANY WARRANTY; without even the implied warranty of    
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     
# GNU General Public License for more details.                      
#                                                                   
# You should have received a copy of the GNU General Public License 
# along with this program; if not, write to the Free Software       
# Foundation, Inc., 51 Franklin Street, Boston,            
# MA  02110-1301, USA.                                              
#

CONF_READ=false
DEFAULT_LOG_DEBUG_DIR=/tmp/testing-machine/vmm/
DEFAULT_LOG_FORMAT=txt
DEFAULT_SSH=ssh
DEFAULT_SCP=scp
DEFAULT_ANDROID_SYS="emulator64-arm"
INIT_DONE=0

DEBUG=true


PERSONAL_ETC_DIR=${HOME}/.testingmachine/

#DEBUG=true

ERROR_STRINGS[0]="Success"
ERROR_STRINGS[1]="could not find configuration file"
ERROR_STRINGS[2]="could not find configuration file for client"
ERROR_STRINGS[3]="could not start client"
ERROR_STRINGS[4]="could not stop client"
ERROR_STRINGS[5]="error when executing a command"
ERROR_STRINGS[6]="could not find functions file"
ERROR_STRINGS[7]="could not find vmm-functions file"
LAST_ERROR=6

DATE=$(date +%Y-%m-%d)

read_functions()
{
    FUNC_FILE=$SCRIPT_DIR/$1

    if [ ! -f  $FUNC_FILE ]
    then
	echo "$PROGRAM_NAME: Could not find functions file ($FUNC_FILE)"
    # exit 7 - means we couldn't find the functions file
	exit 7
    fi
    . $FUNC_FILE
}

find_read_conf()
{
    # don't call init_vmm

    VMM_CONF=$1

    if [ -f $VMM_CONF ]
    then
	. $VMM_CONF
	CONF_READ=true
    fi
}




init_vmm()
{
    if [ $INIT_DONE -ne 0 ]
    then
	return
    fi

    if [ "$SSH" = "" ]
    then
        SSH="$DEFAULT_SSH"
    fi

    if [ "$SCP" = "" ]
    then
        SCP="$DEFAULT_SCP"
    fi

    if [ "$ANDROID_SYS" = "" ]
    then
        ANDROID_SYS="$DEFAULT_ANDROID_SYS"
    fi

    if [ "$ETC_DIRS" = "" ]
    then
	ETC_DIRS="/etc/testingmachine $VMM_DIR/etc/ ${PERSONAL_ETC_DIR}"
    fi
 
    for d in $ETC_DIRS
    do
	find_read_conf $d/vmm.conf
    done

    read_functions vmm-client-functions
    read_functions generate-conf

    if [ "$LOG_FORMAT" = "" ]
    then
	LOG_FORMAT="$DEFAULT_LOG_FORMAT"
    fi

    if [ "$LOG_DEBUG_DIR" = "" ]
    then
	LOG_DEBUG_DIR=$DEFAULT_LOG_DEBUG_DIR
    fi
    if [ ! -d $LOG_DEBUG_DIR ]
    then
	mkdir -p $LOG_DEBUG_DIR
    fi

    if [ -f $SCRIPT_DIR/loggers/$LOG_FORMAT-logger ]
    then
	. $SCRIPT_DIR/loggers/$LOG_FORMAT-logger
	logger_init
    else
	echo "LOG FORMAT \"$LOG_FORMAT\" not supported"
	echo "* defaulting to stderr"
    fi

    if [ -f $SCRIPT_DIR/loggers/debug-logger ]
    then
	. $SCRIPT_DIR/loggers/debug-logger
	init_debug_file
    else
	echo "Could not find file: $SCRIPT_DIR/loggers/debug-logger"
    fi

    check_android_settings
    

    INIT_DONE=1
}


exit_with_msg()
{
    echo "Error:   $1"
    echo "Message: " ${ERROR_STRINGS[$1]}
    exit $1
}


exit_on_error()
{
    if [ "$1" != "0" ]
	then
	echo "ERROR"
	log "ERROR"
	if [ "$2" != "" ]
	then
	    echo "  Message: $2"
	    log  "  Message: $2"
	fi
	exit 1
    fi
}


countdowner()
{
    TMP=$1
    printf "sleeping for: %2s seconds" $TMP
    while [ $TMP -gt 0 ]
    do
	printf "\b\b\b\b\b\b\b\b\b\b%2s seconds" $TMP
	TMP=$(( $TMP - 1 ))
	sleep 1
    done
    printf "          \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
    printf "          "
    printf "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r"
}


init_vmm
