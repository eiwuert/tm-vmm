#!/bin/bash
#
#                                                                   
#                   Testing Machine
#                      
#   Copyright (C) 2012, 2013 TIS Innovation Park
#                                                                   
# This program is free software; you can redistribute it and/or     
# modify it under the terms of the GNU General Public License       
# as published by the Free Software Foundation; either version 3    
# of the License, or any later version.                             
#                                                                   
#                                                                   
# This program is distributed in the hope that it will be useful,   
# but WITHOUT ANY WARRANTY; without even the implied warranty of    
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     
# GNU General Public License for more details.                      
#                                                                   
# You should have received a copy of the GNU General Public License 
# along with this program; if not, write to the Free Software       
# Foundation, Inc., 51 Franklin Street, Boston,            
# MA  02110-1301, USA.                                              
#

VMM_DIR=__VMM_DIR__
VMM_NAME=$(basename $0)
TM_VERSION=__TM_VERSION__

SHARE_DIR=
SCRIPT_DIR=$VMM_DIR/share/testingmachine/scripts



#
# Read in functions file
#
VMM_FUNCTION=$SCRIPT_DIR/functions
if [ ! -f  $VMM_FUNCTION ]
then
    echo "$VMM_NAME: Could not find functions file ($VMM_FUNCTION)"
    # exit 6 - means we couldn't find the functions file
    exit 6
fi
. $VMM_FUNCTION



usage()
{
    echo "$VMM_NAME [OPTIONS]" 
    echo ""
    echo "RETURN VALUES"
    for i in $(seq 0 $LAST_ERROR)
    do
	echo "  $i - " ${ERROR_STRINGS[$i]}
    done
    echo ""
    echo "OPTIONS"
    echo "  --help"
    echo "    Prints usage text"
    echo ""
    echo "  --list-clients"
    echo "    Lists all available clients"
    echo ""
    echo "  --list-machines"
    echo "    Lists all available machines"
    echo ""
    echo "  --list-running-clients"
    echo "    Lists all running clients"
    echo ""
    echo "  --list-running-machines"
    echo "    Lists all running virtual machines "
    echo ""
    echo "  --start-client CLIENT_NAME"
    echo "    Starts client called CLIENT_NAME"
    echo ""
    echo "  --start-client-headless CLIENT_NAME"
    echo "    Starts client called CLIENT_NAME as headless (no screen)"
    echo ""
    echo "  --stop-client CLIENT_NAME"
    echo "    Stops client called CLIENT_NAME"
    echo ""
    echo "  --import-appliance APPLIANCE OVA_FILE"
    echo "    Imports the appliance"
    echo ""
    echo "  --pause-client CLIENT_NAME"
    echo "    Pauses the running client called CLIENT_NAME"
    echo ""
    echo "  --resume-client CLIENT_NAME"
    echo "    Resumes the paused client called CLIENT_NAME"
    echo ""
    echo "  --check-client-ssh CLIENT_NAME"
    echo "    Checks if ssh is up on the client called CLIENT_NAME"
    echo ""
    echo "  --check-client-status CLIENT_NAME"
    echo "    Checks if the client called CLIENT_NAME is up and running"
    echo ""
    echo "  --client-exec CLIENT_NAME COMMAND"
    echo "    Execeutes the COMMAND on the client called CLIENT_NAME"
    echo ""
    echo "  --client-exec-fail CLIENT_NAME COMMAND"
    echo "    Executes the COMMAND on the client called CLIENT_NAME and turns it off upon failure"
    echo ""
    echo "  --client-exec-as-root CLIENT_NAME COMMAND"
    echo "    Execeutes the COMMAND on the client called CLIENT_NAME as root"
    echo ""
    echo "  --client-x11 CLIENT_NAME"
    echo "    Checks if X11 is up and running on the client called CLIENT_NAME"
    echo ""
    echo "  --client-screenshot CLIENT_NAME [IMG_NAME]"
    echo "    Takes a screenshot on the client called CLIENT_NAME (not implemented for VirtualBox)"
    echo ""
    echo "  --print-client CLIENT_NAME"
    echo "    Prints the configuration for the client called CLIENT_NAME"
    echo ""
    echo "  --wait-for-ssh CLIENT_NAME"
    echo "    Waits until ssh is up and running on the client called CLIENT_NAME"
    echo ""
    echo "  --shell CLIENT_NAME"
    echo "    Opens an interactive shell on the client called CLIENT_NAME"
    echo ""
    echo "  --check-client-online CLIENT_NAME"
    echo "    Checks if the client called CLIENT_NAME can ping the outside world"
    echo ""
    echo "  --create-client-conf CLIENT_NAME"
    echo "    Creates the configuration for the client called CLIENT_NAME automatically"
    echo ""
    echo "  --client-copy-file SRC DST"
    echo "    Copies a file from a client to a host or from a host to a client; a host resource could be '~/myhostfile', and a client resource could be '[CLIENT_NAME]:~/myclientfile'"
    echo ""
    echo "  --is-client-up CLIENT_NAME"
    echo "    Checks whether the client called CLIENT_NAME is running"
    echo ""
    echo "  --version"
    echo "    Checks the current version of the tm-vmm"
    echo ""
    echo "  --wait-for-client CLIENT_NAME TIMEOUT<optional>"
    echo "    (Needs updating) (Default TIMEOUT value is 120 if it is not set by the user)"
    echo ""
    echo "  --unlock-screen CLIENT_NAME"
    echo "    Unlocks the screen of the virtual machine (Android only for now)"
    echo ""
    echo "  --install-app CLIENT_NAME PACKAGE"
    echo "    Installs application on the client called CLIENT_NAME (APK, DEB or RPM); APK files are not yet transferred to the client"
    echo ""
    echo "  --uninstall-app"
    echo "    Uninstalls application APP_NAME on the client called CLIENT_NAME (APK, DEB or RPM)"
    echo ""
    echo "  --print-client-settings"
    echo "    Prints the path to the client's configuration"
    echo ""
    echo "  --get-client-os"
    echo "    Displays the operating system of the client called CLIENT_NAME"
    echo ""
    echo "  --for-clients-run SCRIPT [CLIENT_NAMES]"
    echo "    For each client, starts it, run the script, and stop it"
    echo ""

    exit 0
}


while [ "$1" != "" ]
do
    case "$1" in 
	
	"--list-clients")
	    list_clients
	    ;;
	
	"--list-running-clients")
	    LIST_RUNNING=true
	    check_android_settings
	    list_running_clients
	    RET=$?
	    ;;

	"--list-running-machines")
	    LIST_RUNNING=true
	    check_android_settings
	    list_running_machines
	    RET=$?
	    ;;


	"--list-machines")
            list_machines
            ;;
	
	"--start-client")
	    VCLIENT=$2
	    get_info_for_client $VCLIENT
	    start_client
	    RET=$?
	    shift
	    ;;
	
	"--start-client-headless")
	    VCLIENT=$2
	    get_info_for_client $VCLIENT
	    start_client headless
	    RET=$?
	    shift
	    ;;
	
	"--check-client-ssh")
	    VCLIENT=$2
	    get_info_for_client $VCLIENT
	    check_client_ssh
	    RET=$?
	    shift
	    ;;

	"--check-client-online")
	    VCLIENT=$2
	    get_info_for_client $VCLIENT
	    is_client_online
	    RET=$?
	    shift
	    ;;
	
	"--check-client-status")
	    VCLIENT="$2"
	    get_info_for_client $VCLIENT
	    check_client_status
	    RET=$?
	    shift
	    ;;
	
	"--stop-client")
	    VCLIENT=$2
	    get_info_for_client $VCLIENT
	    stop_client
	    RET=$?
	    shift
	    ;;
	
	"--client-exec")
	    VCLIENT=$2
	    COMMAND="$3"
	    get_info_for_client $VCLIENT
	    exec_client_command "$COMMAND"
	    RET=$?
	    shift
	    shift
	    ;;

	"--client-exec-fail")
	    VCLIENT=$2
	    COMMAND="$3"
	    get_info_for_client $VCLIENT
	    exec_client_command "$COMMAND"
	    RET=$?

	    if [ "$RET" != "0" ]
		then
		echo "STOPPING CLIENT due to failure"
		stop_client
		exit $RET
	    fi

	    shift
	    shift
	    ;;

	"--client-exec-as-root"	)
	    VCLIENT=$2
	    COMMAND="$3"
	    get_info_for_client $VCLIENT
	    exec_client_command_as_root "$COMMAND"
	    RET=$?
	    shift
	    shift
	    ;;

	"--client-x11")
	    VCLIENT=$2
	    get_info_for_client $VCLIENT
	    is_client_x11_up
	    shift
	    ;;

	"--wait-for-ssh")
	    VCLIENT=$2
	    TIMEOUT=$3
	    get_info_for_client $VCLIENT
	    if [ "$TIMEOUT" = "" ] ; then TIMEOUT=120 ; fi
	    wait_for_ssh up "$TIMEOUT"
	    shift
	    shift
	    ;;

	"--wait-for-client")
	    VCLIENT=$2
	    TIMEOUT=$3
	    get_info_for_client $VCLIENT
	    if [ "$TIMEOUT" = "" ] ; then TIMEOUT=120 ; fi
	    wait_for_state up "$TIMEOUT"
	    shift
	    shift
	    ;;

	"--shell")
	    VCLIENT=$2
	    TIMEOUT=$3
	    get_info_for_client $VCLIENT
	    if [ "$TIMEOUT" = "" ] ; then TIMEOUT=120 ; fi
	    wait_for_shell up "$TIMEOUT" $VCLIENT
	    shift
	    shift
	    open_shell

	    ;;

	"--print-client")
	    VCLIENT=$2
	    get_info_for_client $VCLIENT
	    print_client
	    shift
	    ;;
	
	"--client-screenshot")
	    VCLIENT=$2
	    IMG_NAME="$3"
	    get_info_for_client $VCLIENT
	    client_screenshot "$IMG_NAME"
	    shift
	    ;;

	"--import-appliance")
	    OVA_FILE="$2"
	    import_appliance "$OVA_FILE"
	    shift
	    ;;

	"--pause-client")
	    VCLIENT=$2
	    get_info_for_client $VCLIENT
	    pause_client
	    shift
	    shift
	    ;;

	"--resume-client")
	    VCLIENT=$2
	    get_info_for_client $VCLIENT
	    resume_client
	    shift
	    shift
	    ;;

	"--create-client-conf")
	    VCLIENT=$2
	    create_client_conf "$VCLIENT"
	    shift
	    shift
	    ;;

	"--client-copy-file")
	    SRC=$2
	    DST=$3
	    client_copy_file "$SRC" "$DST"
	    shift
	    shift
	    ;;

	"--is-client-up")
	    VCLIENT=$2
	    shift
	    get_info_for_client "$VCLIENT"
	    is_client_up
	    echo "Client up? $? ( 0: up | 1: not up )"
	    ;;

	"--unlock-screen")
	    VCLIENT=$2
	    shift
	    get_info_for_client "$VCLIENT"
	    unlock_screen
	    ;;

	"--install-app")
	    VCLIENT=$2
	    APP=$3
	    shift
	    shift
	    get_info_for_client "$VCLIENT"
	    install_app "$APP"
	    ;;

	"--uninstall-app")
	    VCLIENT=$2
	    APP=$3
	    shift
	    shift
	    get_info_for_client "$VCLIENT"
	    uninstall_app "$APP"
	    ;;

	"--print-client-settings")
	    VCLIENT=$2
	    shift
	    get_info_for_client "$VCLIENT"
	    print_client_settings
	    ;;

	"--get-client-os")
	    VCLIENT=$2
	    shift
	    get_info_for_client "$VCLIENT"
	    get_guest_os_for_client
	    echo $GUEST_OS
	    ;;

	"--for-clients-run")
	    SCRIPT_FILE=$2
	    VCLIENTS=$3
	    shift
	    shift
	    exec_clients_or_exec_all_clients "$SCRIPT_FILE" "$VCLIENTS"
	    ;;

	"--help")
	    usage
	    ;;
	"--version")
	    echo "$TM_VERSION"
	    exit 0
	    ;;
	
	*)
	    echo "SYNTAX ERROR ($*)"
	    exit 1
	    ;;
    esac
    shift
done

exit $RET
